const re = /kon.*/ig;
const re2 = /aleyazd.*/ig;
const rere = /\*.mp4/ig;
const re3 = /apasih.*/ig;
const re4 = /satanis.*/ig;
const re5 = /say.*/ig;
const re6 = /sayang.*/ig;
const re7 = /pesan.*/ig;
const fs = require('fs');
const chrome = require('chrome-aws-lambda');
const qrcode = require('qrcode-terminal');
const express = require("express");
const app = express();
const qrimg = require('qrcode');
const output = fs.createWriteStream('./public/stdout.log');
const errorOutput = fs.createWriteStream('./public/stderr.log');
const path = require('path');
// custom simple logger
const logger = new console.Console(output, errorOutput);
// use it like logger
//logger.log('count: %d', count);
app.get("/", (req, res) => {
	res.sendFile(__dirname + './public/stdout.log');
});
app.get("/qr", (req, res) => {
	res.sendFile(__dirname + './public/ano.png');
});
app.listen(80, () => {
  logger.log("Running on port 80.");
});


// Export the Express API
module.exports = app;

const { Client, LocalAuth } = require('./ano');
async function start() {
	const executablePath = await chrome.executablePath

const client = new Client({
	puppeteer: { headless: true, chrome, args: ['--no-sandbox'],  executablePath: executablePath }
}); 

client.on('qr', (qr) => {
    qrcode.generate(qr, {small: true});
	//qrimg.toFile(path.resolve(__dirname, './public', 'ano.png'), qr);
    logger.log('QR RECEIVED', qr);
});
client.on('authenticated', (session) => {
    logger.log('AUTHENTICATED', session);
});

client.on('auth_failure', msg => {
    // Fired if session restore was unsuccessfull
    logger.error('AUTHENTICATION FAILURE', msg);
});

client.on('ready', () => {
    logger.log('READY');
	
});

client.on('message', async msg => {
	
	const fs = require('fs');
	const array = fs.readFileSync('mute.txt').toString().split("\n");
	const chat = await msg.getChat();
	const contact = await msg.getContact();
	const list = (contact.number);
	const str_replace = require('str_replace');
	//const msgf = str_replace('@628', '7', msg.body)
	//const msgf = (msg.body)
	logger.log("["+contact.number?.slice(5),contact?.pushname,msg.body+"]\n");
	if (array.includes(list))
	{
		//chat.sendMessage(`not probihited`);
	}
	else {
	if (msg.body === '1') {
		const chat = await msg.getChat();
		const contact = await msg.getContact();
		if (`${contact.number}` === '6282246901096'){
			chat.sendStateTyping();
			chat.sendMessage(`Hallo gosujin sama @${contact.number} ^_^`, {
				mentions: [contact]
			});
		}
		else {
			chat.sendStateTyping();
			chat.sendMessage(`Hi @${contact.number}!`, {
				mentions: [contact]
			});
		}
    }
	else if (msg.body === '2') {
		const chat = await msg.getChat();
		const contact = await msg.getContact();
		logger.log(contact);
    }
	
    
    else {
  	
    }
	
	
	}

	});
	
	

client.initialize();

client.on('message_create', async (msg) => {
//logger.log('MESSAGE RECEIVED', msg);
    // Fired on all message creations, including your own
      if (msg.fromMe) {
        //logger.log('{"status": "#####FROM ME#######"},')
    }
  
});

client.on('message_ack', (msg, ack) => {
    /*
        == ACK VALUES ==
        ACK_ERROR: -1
        ACK_PENDING: 0
        ACK_SERVER: 1
        ACK_DEVICE: 2
        ACK_READ: 3
        ACK_PLAYED: 4
    */

    if(ack == 3) {
        //logger.log ('{"status terbaca": "######readed#########"},')
    }
	
});
}
start()